Java Programming 04-03-2016
--------------------------------
Agenda
----------
1. Control Statements
2. Functions
3. Object Oriented Programming
--------------------------------------------



1. Control Statement
---------------------------
Control Statements helps in controlling the flow of the program
and influence the running of the program.
1.1 if ---else control statement
----------------------------------
format:
--------
if(cond)
{
//statements
}
else
{
//statements
}
Example:
---------
import javax.swing.*;
public class MyIfElse
{
public static void main(String args[])
{
int a;
String s;
JOptionPane p=new JOptionPane();
s=p.showInputDialog("Enter a Number:");
a=Integer.parseInt(s);
if(a>10)
{
p.showMessageDialog(null,"You Entered A Nuber Greater Than 10");
}
else
{
p.showMessageDialog(null,"You Entered A Nuber Less Than 10");
}
}
}
-----------------------------------------------------------------------
1.2 Loop Control Statement
------------------------------------
Loops help to solve a repeatitive task. 
-------------------------------------------
1.2.1 for loop
------------------
format:
--------
Declaration;
for(initialization; condition;increment/decrement)
{
//statement
}
Example1:
-------------
public class MyForLoop{
public static void main(String args[]){
int i;
for (i=1;i<=10;i++){
System.out.println(i+". Hello CS 2 Students");
}
}
}
-----------------------
Example 2:
------------------
public class MyForLoop2
{
public static void main(String args[])
{
int a;
int sum=0;
for (a=10;a>=1;a--)
{
sum=sum+a;
}
System.out.println("Sum of First 10 Integer Numbers:"+sum);
}
}
-----------------------------------------------
while loop
---------------
format:
--------
Initialization;
while(cond)
{
//statement
Increment/Decrement
}
--------------------------------------
Example
--------------
public class MyWhileLoop
{
public static void main(String args[])
{
int i=1;
while(i<=20)
{
System.out.println("Rwanda is Good!!!");
i++;
}
}
-------------------------------------
do ---while Loop
--------------------
format:
---------
Initialization;
do
{
//statements
Increment/Decrement
}
while(cond);
-------------------------
Example: Print Odd Numbers less than 100
-----------
public class MyDoWhileLoop
{
public static void main(String args[])
{
int k=1;
do
{
System.out.println(k);
k=k+2;
}
while (k<100);
}
}
------------------------------
Bonus Exercise:
=============
Write a Java Program which prompts user to enter a number. 
If the number is less than 10 the program displays the 
pascal triangle  made of stars in the following format:
*
* *
* * *
* * * *
* * * * *
If the number is in between 10 and 20 the program displays
the pascal triangle in the following format:
5
5 4
5 4 3
5 4 3 2
5 4 3 2 1
.............
Otherwise It will print a message: "Number not Allowed."
1 2 3 4
1 2 3 4 5
----------
Answer:
import java.io.*;
public class Bonus_Loop {
public static void main(String args[])throws IOException
{
String s;
int a;
int i,k;
DataInputStream is=new DataInputStream(System.in);
System.out.println("Enter a Number:");
s=is.readLine();
a=Integer.parseInt(s);
if(a<20)
{
for(i=1;i<=a;i++)
{
for(k=1; k<=i;k++)
{
System.out.print(k+" ");
}
System.out.println();
}
}
else
{
System.out.println("Only Numbers Less Than 20");
}
} 
}
-------------------------------------
Method in Java
------------------------
-> A Method in Java is like Function in other Languages
-> A Method represents the related activities to perform a task
-> In Java a Method represents the behavior of the program

Method Declaration:
--------------------------
format:
----------
Modifier Datatype MethodName(List of Parameters)
{
//statements
}
NB: If a Method will be called in main Method without using
class it has to be static.
--------------------------------
Example1: Method without Parameters or Arguments
------------------------------------------------
import java.io.*;
 class MyMethod
{
static String s;
public static void getName() throws IOException
{
DataInputStream d=new DataInputStream(System.in);
System.out.println("Enter a Name:");
s=d.readLine();
}
public static void SayHello()
{
System.out.println("Hello "+s);
}
public static void main(String args[]) throws IOException
{
getName();
SayHello();
}
}
------------------------------------------------------------------------
Method with Parameters
----------------------------------
public class My_Method_Parameter
{
public static int square(int a)
{
int sq=a*a;
return sq;
}
public static void main(String args[])
{
int c=square(125);
System.out.println("Square= "+c);
}
}
-------------------------------------
Metthod Overloading
--------------------------
One Method doing different tasks according to the return type or
list of parameters.
-------------------------------
Example:
---------------
public clss MyMethodOverLoad
{
public static int sum(int a, int b)
{
int c=a+b;
System.out.println(c);
}
public static double sum(double x, double y)
{
double c=x+y;
System.out.println(c);
}
public static int sum(int a, int b, int c)
{
int d=a+b+c;
System.out.println(d);
}
public static void main(String args[])
{
sum(10,20);
sum(2.5,17.5);
sum(10,20,30);
}
}